#!/usr/bin/env python3

from argparse import ArgumentParser
ARGS=ArgumentParser()
COMMAND=ARGS.add_subparsers(dest='command')
COMMAND.add_parser('init',help='Initialize the new package').add_argument('path',help='Path to initialize to')
COMMAND.add_parser('config',help='Configure metadata file in package')
ARGS.add_argument('--git',action='store_true',help='Initialize the new Git repository in new package')
ARGS=ARGS.parse_args()
from tarfile import open as taropen
from os import path,listdir
from colorama import Fore
from requests import get

if not path.exists('/usr/share/apgbuild/template.apg'):
    print(Fore.LIGHTYELLOW_EX+'Template APG is not downloaded, restoring...')
    try:
        template_package=get('https://github.com/NurOS-Linux/APGexample/releases/latest/download/template.apg')
        if template_package.status_code!=200:
            print(Fore.LIGHTRED_EX+f'Failed to download template APG: {template_package.status_code}')
            exit(1)
    except Exception as e:
        print(Fore.LIGHTRED_EX+f'Failed to download template APG: {e}')
        exit(1)
    with open('/usr/share/apgbuild/template.apg','wb')as template_package_file:
        template_package_file.write(template_package.content)
        template_package_file.close()

class Initialization:
    def __init__(self,path:str):
        print(Fore.LIGHTCYAN_EX+'Initializing the new package...')
        self.path=path
        self.package=taropen('/usr/share/apgbuild/template.apg')
        self.package.extractall(self.path)
        if ARGS.git:self.init_git()
        print(Fore.LIGHTGREEN_EX+'Successfully initialized new package.')
    def init_git(self):
        print(Fore.LIGHTBLUE_EX+'Initializing the Git repository...')
        from git import Repo
        Repo.init(self.path)
        print(Fore.LIGHTGREEN_EX+'Successfully initialized Git repository in new package.')

class Configuring:
    def __init__(self):
        print(Fore.LIGHTCYAN_EX+'Configuring metadata....')
        if not path.exists('metadata.json'):
            print(Fore.LIGHTRED_EX+'Metadata file is not found in this directory. Did you initialized a package?')
            exit(1)
        from json import load
        self.metadata=open('metdata.json','w+t')
        self.metadata_content=load(self.metadata)
        self.ask()
        print(Fore.LIGHTGREEN_EX+'Successfully configured metadata.')
    def ask(self):
        for key,value in self.metadata_content.items():self.metadata_content[key]=input(f'Key: {key}, Current value: {value}, New value: ')
        self.metadata.write(str(self.metadata_content))

class ChecksumsGenerating:
    def __init__(self):
        print(Fore.LIGHTCYAN_EX+'Generating checksums...')
        if not path.exists('data'):
            print(Fore.LIGHTRED_EX+'`data` directory is not found. Did you initialized the package?')
            exit(1)
        from hashlib import md5
        self.files=[]
        self.get_files()
    def __get_files(self,dirpath:str):
        for file in listdir(dirpath):
            file=path.join(dirpath,file)
            
    def get_files(self):
        for file in listdir('data'):
            if path.isdir(file):self.__get_files(file)
